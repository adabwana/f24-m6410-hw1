{"title":"Utils","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw1.utils.html"}},"fontsize":"0.9em","code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"Utils","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw1.utils_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw1.utils_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw1.utils\n  (:require\n    [clojisr.v1.applications.plotting :refer [plot->svg]]\n    [clojisr.v1.r :refer [r+ require-r]]\n    [fastmath.core :as m]\n    [fastmath.random :as rand]\n    [fastmath.stats :as s]\n    [scicloj.hanamicloth.v1.api :as haclo]\n    [scicloj.kindly.v4.api :as kindly]\n    [scicloj.kindly.v4.kind :as kind]\n    [tablecloth.api :as tc]))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(kind/md \"## Utils\")\n```\n:::\n\n\n\n\n::: {.sourceClojure}\n```clojure\n(require-r '[stats :refer [dnorm]]\n           '[ggplot2 :refer [ggplot aes geom_area geom_vline scale_x_continuous\n                             geom_text stat_function labs theme_minimal theme_set]])\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\nnil\n\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (theme_set (theme_minimal)))\n```\n:::\n\n\nFormatting code\n\n\n::: {.sourceClojure}\n```clojure\n(def md (comp kindly/hide-code kind/md))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def question (fn [content] ((comp kindly/hide-code kind/md) (str \"## \" content \"\\n---\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-question (fn [content] ((comp kindly/hide-code kind/md) (str \"#### *\" content \"*\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-sub (fn [content] ((comp kindly/hide-code kind/md) (str \"***\" content \"***\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def answer (fn [content] (kind/md (str \"> <span style=\\\"color: black; font-size: 1.5em;\\\">**\" content \"**</span>\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def formula (comp kindly/hide-code kind/tex))\n```\n:::\n\n\nCalculator steps\n\n\n::: {.sourceClojure}\n```clojure\n(def calculator-buttons [\"MENU\" \"2\" \"F5\" \"F5\" \"F1\"])\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def calculator-descriptions [\"Open main menu\"\n                              \"Select STAT\"\n                              \"Open DIST menu\"\n                              \"Select BINM (Binomial)\"\n                              \"Choose bpd (probability density)\"])\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn format-button [btn]\n  (str \"`\" btn \"`\"))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn steps-table [{:keys [buttons descriptions]}]\n  (let [steps (range 1 (inc (count buttons)))]\n    (tc/dataset {:step        steps\n                 :button      buttons\n                 :description descriptions})))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def calculator-steps\n  (steps-table {:buttons      calculator-buttons\n                :descriptions calculator-descriptions}))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn x->z\n  \"Converts a value x to its corresponding z-score.\n   x: value to convert\n   mu: mean of the distribution\n   sigma: standard deviation of the distribution\"\n  [x mu sigma]\n  (/ (- x mu) sigma))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn z->x\n  \"Converts a z-score back to its corresponding x value.\n   z: z-score to convert\n   mu: mean of the distribution\n   sigma: standard deviation of the distribution\"\n  [z mu sigma]\n  (+ (* z sigma) mu))\n```\n:::\n\n\nBinomial distribution\n\n\n::: {.sourceClojure}\n```clojure\n(defn ncr\n  \"Calculates the binomial coefficient (n choose k).\n   n: total number of items\n   k: number of items to choose\"\n  [n k]\n  (/ (reduce * (range 1 (inc n)))\n     (* (reduce * (range 1 (inc k)))\n        (reduce * (range 1 (inc (- n k)))))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn pmf-binomial\n  \"Calculates the probability mass function for a binomial distribution.\n   k: number of successes\n   n: number of trials\n   p: probability of success on each trial\"\n  [k n p]\n  (let [binom-coeff (ncr n k)]\n    (* binom-coeff (Math/pow p k) (Math/pow (- 1 p) (- n k)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn cmf-binomial\n  \"Calculates the cumulative mass function for a binomial distribution.\n   k: number of successes\n   n: number of trials\n   p: probability of success on each trial\"\n  [k n p]\n  (let [probabilities (map #(pmf-binomial % n p) (range (inc k)))]\n    (reduce + probabilities)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn bin-cmf-viz\n  \"Creates a visualization of the binomial cumulative distribution function.\n   n: number of trials\n   p: probability of success on each trial\"\n  [n p]\n  (let [data (tc/dataset\n               {:k           (mapv str (range (inc n)))\n                :probability (map #(pmf-binomial % n p) (range (inc n)))\n                :cumulative  (reductions + (map #(pmf-binomial % n p) (range (inc n))))})]\n    (-> data\n        (haclo/layer-bar\n          {:=x :k\n           :=y :probability}))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn binomial-dist-viz [sample-size n p]\n  (let [binomial-dist (rand/distribution :binomial {:p p :trials n})\n        samples (repeatedly sample-size #(rand/sample binomial-dist))\n        data (-> (tc/dataset {:value samples})\n                 (tc/group-by :value)\n                 (tc/aggregate {:count tc/row-count})\n                 (tc/add-column :with-cancer #(map str (:$group-name %))))\n        plot (-> data\n                 (haclo/layer-bar\n                   {:=x :with-cancer\n                    :=y :count}))\n        mean-value (s/mean samples)]\n    [plot (md (str \"Mean of samples: \" (m/approx mean-value 4)))]))\n```\n:::\n\n\nNormal distribution\n\n\n::: {.sourceClojure}\n```clojure\n(defn pnorm\n  \"Calculates the cumulative distribution function (CDF) of the standard normal distribution.\n   z: z-score\"\n  [z]\n  (rand/cdf (rand/distribution :normal) z))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn inv-normal\n  \"Calculates the inverse of the standard normal cumulative distribution function.\n   p: probability (0 < p < 1)\"\n  [p]\n  (rand/icdf (rand/distribution :normal) p))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn dnorm-clj\n  \"Calculates the probability density function (PDF) of the normal distribution.\n     If given one argument:\n       z: z-score (assumes standard normal distribution with mean 0 and sd 1)\n     If given three arguments:\n       x: value\n     mu: mean of the distribution\n     sd: standard deviation of the distribution\"\n  ([z]\n   (rand/pdf (rand/distribution :normal) z))\n  ([x mu sd]\n   (rand/pdf (rand/distribution :normal {:mu mu :sd sd}) x)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn dnorm)\n  \"Calculates the probability density function (PDF) of the standard normal distribution.\n   If given one argument:\n     z: z-score (assumes standard normal distribution with mean 0 and sd 1)\n   If given three arguments:\n     x: value\n     mu: mean of the distribution\n     sd: standard deviation of the distribution\"\n  ([x mean sd]\n   (let [coefficient (/ 1 (* sd (Math/sqrt (* 2 Math/PI))))\n         exponent (/ (Math/pow (- x mean) 2) (* -2 (Math/pow sd 2)))]\n     (* coefficient (Math/exp exponent))))\n  ([z]\n   (dnorm z 0 1)))\n```\n:::\n\n\nPlots\n\n\n::: {.sourceClojure}\n```clojure\n(defn norm-plot-threshold\n  \"Creates a ggplot2 plot for the temperature distribution.\"\n  [threshold mean-temp sd-temp shade-direction]\n  (let [z-score (/ (- threshold mean-temp) sd-temp)\n        percentage (* 100 (if (= shade-direction :right)\n                            (- 1 (pnorm z-score))\n                            (pnorm z-score)))\n        xlim [(- mean-temp (* 5 sd-temp)) (+ mean-temp (* 5 sd-temp))]]\n    (-> (ggplot :data (tc/dataset {:x xlim}) (aes :x 'x))\n        (r+ (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :geom \"area\" :fill \"lightblue\" :alpha 0.7)\n            (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :xlim (if (= shade-direction :right)\n                                   [threshold (second xlim)]\n                                   [(first xlim) threshold])\n                           :geom \"area\" :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept threshold :color \"red\" :linetype \"dashed\")\n            (geom_text :x threshold :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Threshold:\" threshold))\n            (labs :title \"Distribution of X\"\n                  :subtitle (str \"Percentage \"\n                                 (if (= shade-direction :right) \"above\" \"below\")\n                                 \" threshold: \"\n                                 (format \"%.4f\" percentage) \"%\")\n                  :x \"X\"\n                  :y \"Density\")\n            (scale_x_continuous :limits xlim)\n            (theme_minimal))\n        plot->svg)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn norm-plot-thresh-btw\n  [lower-bound upper-bound mu sd]\n  (let [z-score-lower (/ (- lower-bound mu) sd)\n        z-score-upper (/ (- upper-bound mu) sd)\n        percentage (* 100 (- (pnorm z-score-upper) (pnorm z-score-lower)))\n        xlim [(- mu (* 5 sd)) (+ mu (* 5 sd))]]\n    (-> (ggplot :data (tc/dataset {:x xlim}) (aes :x 'x))\n        (r+ (stat_function :fun dnorm :args [mu sd]\n                           :geom \"area\" :fill \"lightblue\" :alpha 0.7)\n            (stat_function :fun dnorm :args [mu sd]\n                           :xlim [lower-bound upper-bound]\n                           :geom \"area\" :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept lower-bound :color \"red\" :linetype \"dashed\")\n            (geom_vline :xintercept upper-bound :color \"red\" :linetype \"dashed\")\n            (geom_text :x lower-bound :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Lower: \" lower-bound))\n            (geom_text :x upper-bound :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Upper: \" upper-bound))\n            (labs :title \"Distribution of X\"\n                  :subtitle (str \"Percentage between thresholds: \"\n                                 (format \"%.4f\" percentage) \"%\")\n                  :x \"X\"\n                  :y \"Density\")\n            (scale_x_continuous :limits xlim)\n            (theme_minimal))\n        plot->svg)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn norm-plot-pval\n  \"Creates a ggplot2 plot for the temperature distribution with p-value shading.\"\n  [p-val mean-temp sd-temp direction]\n  (let [z-score (inv-normal (if (= direction :right) (- 1 p-val) p-val))\n        threshold (z->x z-score mean-temp sd-temp)\n        xlim [(- mean-temp (* 5 sd-temp)) (+ mean-temp (* 5 sd-temp))]]\n    (-> (ggplot :data (tc/dataset {:x xlim}) (aes :x 'x))\n        (r+ (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :geom \"area\" :fill \"lightblue\" :alpha 0.7)\n            (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :xlim (if (= direction :right)\n                                   [threshold (second xlim)]\n                                   [(first xlim) threshold])\n                           :geom \"area\" :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept threshold :color \"red\" :linetype \"dashed\")\n            (geom_text :x threshold :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Threshold: \" (format \"%.2f\" threshold)))\n            (labs :title \"Distribution of X\"\n                  :subtitle (str \"Percent of data in red: \" (* 100 p-val) \"%\")\n                  :x \"X\"\n                  :y \"Density\")\n            (scale_x_continuous :limits xlim)\n            (theme_minimal))\n        plot->svg)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn create-temperature-plot)\n  \"Creates a ggplot2 plot for the temperature distribution.\"\n  [plot-data threshold mean-temp sd-temp shade-direction]\n  (let [z-score (/ (- threshold mean-temp) sd-temp)\n        percentage (* 100 (if (= shade-direction :right)\n                            (- 1 (pnorm z-score))\n                            (pnorm z-score)))\n        shaded-data (tc/select-rows plot-data\n                                    (if (= shade-direction :right)\n                                      #(>= (:temperature %) threshold)\n                                      #(<= (:temperature %) threshold)))]\n    (-> (ggplot :data plot-data (aes :x 'temperature :y 'density))\n        (r+ (geom_area :fill \"lightblue\" :alpha 0.7)\n            (geom_area :data shaded-data\n                       :mapping (aes :x 'temperature :y 'density)\n                       :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept threshold :color \"red\" :linetype \"dashed\")\n            (geom_text :x threshold :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Threshold (\" threshold \"°F)\"))\n            (labs :title \"Distribution of Temperatures\"\n                  :subtitle (str \"Percentage \"\n                                 (if (= shade-direction :right) \"above\" \"below\")\n                                 \" threshold: \"\n                                 (format \"%.4f\" percentage) \"%\")\n                  :x \"Temperature (°F)\"\n                  :y \"Density\")\n            (theme_minimal)))))\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw1/blob/main/src/assignments/hw1/utils.clj\">src/assignments/hw1/utils.clj</a></small></small></pre></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw1.utils_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw1.utils_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw1.utils\n  (:require\n    [clojisr.v1.applications.plotting :refer [plot->svg]]\n    [clojisr.v1.r :refer [r+ require-r]]\n    [fastmath.core :as m]\n    [fastmath.random :as rand]\n    [fastmath.stats :as s]\n    [scicloj.hanamicloth.v1.api :as haclo]\n    [scicloj.kindly.v4.api :as kindly]\n    [scicloj.kindly.v4.kind :as kind]\n    [tablecloth.api :as tc]))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(kind/md \"## Utils\")\n```\n:::\n\n\n## Utils\n\n\n::: {.sourceClojure}\n```clojure\n(require-r '[stats :refer [dnorm]]\n           '[ggplot2 :refer [ggplot aes geom_area geom_vline scale_x_continuous\n                             geom_text stat_function labs theme_minimal theme_set]])\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\nnil\n\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (theme_set (theme_minimal)))\n```\n:::\n\n\nFormatting code\n\n\n::: {.sourceClojure}\n```clojure\n(def md (comp kindly/hide-code kind/md))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def question (fn [content] ((comp kindly/hide-code kind/md) (str \"## \" content \"\\n---\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-question (fn [content] ((comp kindly/hide-code kind/md) (str \"#### *\" content \"*\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-sub (fn [content] ((comp kindly/hide-code kind/md) (str \"***\" content \"***\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def answer (fn [content] (kind/md (str \"> <span style=\\\"color: black; font-size: 1.5em;\\\">**\" content \"**</span>\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def formula (comp kindly/hide-code kind/tex))\n```\n:::\n\n\nCalculator steps\n\n\n::: {.sourceClojure}\n```clojure\n(def calculator-buttons [\"MENU\" \"2\" \"F5\" \"F5\" \"F1\"])\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def calculator-descriptions [\"Open main menu\"\n                              \"Select STAT\"\n                              \"Open DIST menu\"\n                              \"Select BINM (Binomial)\"\n                              \"Choose bpd (probability density)\"])\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn format-button [btn]\n  (str \"`\" btn \"`\"))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn steps-table [{:keys [buttons descriptions]}]\n  (let [steps (range 1 (inc (count buttons)))]\n    (tc/dataset {:step        steps\n                 :button      buttons\n                 :description descriptions})))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def calculator-steps\n  (steps-table {:buttons      calculator-buttons\n                :descriptions calculator-descriptions}))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn x->z\n  \"Converts a value x to its corresponding z-score.\n   x: value to convert\n   mu: mean of the distribution\n   sigma: standard deviation of the distribution\"\n  [x mu sigma]\n  (/ (- x mu) sigma))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn z->x\n  \"Converts a z-score back to its corresponding x value.\n   z: z-score to convert\n   mu: mean of the distribution\n   sigma: standard deviation of the distribution\"\n  [z mu sigma]\n  (+ (* z sigma) mu))\n```\n:::\n\n\nBinomial distribution\n\n\n::: {.sourceClojure}\n```clojure\n(defn ncr\n  \"Calculates the binomial coefficient (n choose k).\n   n: total number of items\n   k: number of items to choose\"\n  [n k]\n  (/ (reduce * (range 1 (inc n)))\n     (* (reduce * (range 1 (inc k)))\n        (reduce * (range 1 (inc (- n k)))))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn pmf-binomial\n  \"Calculates the probability mass function for a binomial distribution.\n   k: number of successes\n   n: number of trials\n   p: probability of success on each trial\"\n  [k n p]\n  (let [binom-coeff (ncr n k)]\n    (* binom-coeff (Math/pow p k) (Math/pow (- 1 p) (- n k)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn cmf-binomial\n  \"Calculates the cumulative mass function for a binomial distribution.\n   k: number of successes\n   n: number of trials\n   p: probability of success on each trial\"\n  [k n p]\n  (let [probabilities (map #(pmf-binomial % n p) (range (inc k)))]\n    (reduce + probabilities)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn bin-cmf-viz\n  \"Creates a visualization of the binomial cumulative distribution function.\n   n: number of trials\n   p: probability of success on each trial\"\n  [n p]\n  (let [data (tc/dataset\n               {:k           (mapv str (range (inc n)))\n                :probability (map #(pmf-binomial % n p) (range (inc n)))\n                :cumulative  (reductions + (map #(pmf-binomial % n p) (range (inc n))))})]\n    (-> data\n        (haclo/layer-bar\n          {:=x :k\n           :=y :probability}))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn binomial-dist-viz [sample-size n p]\n  (let [binomial-dist (rand/distribution :binomial {:p p :trials n})\n        samples (repeatedly sample-size #(rand/sample binomial-dist))\n        data (-> (tc/dataset {:value samples})\n                 (tc/group-by :value)\n                 (tc/aggregate {:count tc/row-count})\n                 (tc/add-column :with-cancer #(map str (:$group-name %))))\n        plot (-> data\n                 (haclo/layer-bar\n                   {:=x :with-cancer\n                    :=y :count}))\n        mean-value (s/mean samples)]\n    [plot (md (str \"Mean of samples: \" (m/approx mean-value 4)))]))\n```\n:::\n\n\nNormal distribution\n\n\n::: {.sourceClojure}\n```clojure\n(defn pnorm\n  \"Calculates the cumulative distribution function (CDF) of the standard normal distribution.\n   z: z-score\"\n  [z]\n  (rand/cdf (rand/distribution :normal) z))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn inv-normal\n  \"Calculates the inverse of the standard normal cumulative distribution function.\n   p: probability (0 < p < 1)\"\n  [p]\n  (rand/icdf (rand/distribution :normal) p))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn dnorm-clj\n  \"Calculates the probability density function (PDF) of the normal distribution.\n     If given one argument:\n       z: z-score (assumes standard normal distribution with mean 0 and sd 1)\n     If given three arguments:\n       x: value\n     mu: mean of the distribution\n     sd: standard deviation of the distribution\"\n  ([z]\n   (rand/pdf (rand/distribution :normal) z))\n  ([x mu sd]\n   (rand/pdf (rand/distribution :normal {:mu mu :sd sd}) x)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn dnorm)\n  \"Calculates the probability density function (PDF) of the standard normal distribution.\n   If given one argument:\n     z: z-score (assumes standard normal distribution with mean 0 and sd 1)\n   If given three arguments:\n     x: value\n     mu: mean of the distribution\n     sd: standard deviation of the distribution\"\n  ([x mean sd]\n   (let [coefficient (/ 1 (* sd (Math/sqrt (* 2 Math/PI))))\n         exponent (/ (Math/pow (- x mean) 2) (* -2 (Math/pow sd 2)))]\n     (* coefficient (Math/exp exponent))))\n  ([z]\n   (dnorm z 0 1)))\n```\n:::\n\n\nPlots\n\n\n::: {.sourceClojure}\n```clojure\n(defn norm-plot-threshold\n  \"Creates a ggplot2 plot for the temperature distribution.\"\n  [threshold mean-temp sd-temp shade-direction]\n  (let [z-score (/ (- threshold mean-temp) sd-temp)\n        percentage (* 100 (if (= shade-direction :right)\n                            (- 1 (pnorm z-score))\n                            (pnorm z-score)))\n        xlim [(- mean-temp (* 5 sd-temp)) (+ mean-temp (* 5 sd-temp))]]\n    (-> (ggplot :data (tc/dataset {:x xlim}) (aes :x 'x))\n        (r+ (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :geom \"area\" :fill \"lightblue\" :alpha 0.7)\n            (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :xlim (if (= shade-direction :right)\n                                   [threshold (second xlim)]\n                                   [(first xlim) threshold])\n                           :geom \"area\" :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept threshold :color \"red\" :linetype \"dashed\")\n            (geom_text :x threshold :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Threshold:\" threshold))\n            (labs :title \"Distribution of X\"\n                  :subtitle (str \"Percentage \"\n                                 (if (= shade-direction :right) \"above\" \"below\")\n                                 \" threshold: \"\n                                 (format \"%.4f\" percentage) \"%\")\n                  :x \"X\"\n                  :y \"Density\")\n            (scale_x_continuous :limits xlim)\n            (theme_minimal))\n        plot->svg)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn norm-plot-thresh-btw\n  [lower-bound upper-bound mu sd]\n  (let [z-score-lower (/ (- lower-bound mu) sd)\n        z-score-upper (/ (- upper-bound mu) sd)\n        percentage (* 100 (- (pnorm z-score-upper) (pnorm z-score-lower)))\n        xlim [(- mu (* 5 sd)) (+ mu (* 5 sd))]]\n    (-> (ggplot :data (tc/dataset {:x xlim}) (aes :x 'x))\n        (r+ (stat_function :fun dnorm :args [mu sd]\n                           :geom \"area\" :fill \"lightblue\" :alpha 0.7)\n            (stat_function :fun dnorm :args [mu sd]\n                           :xlim [lower-bound upper-bound]\n                           :geom \"area\" :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept lower-bound :color \"red\" :linetype \"dashed\")\n            (geom_vline :xintercept upper-bound :color \"red\" :linetype \"dashed\")\n            (geom_text :x lower-bound :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Lower: \" lower-bound))\n            (geom_text :x upper-bound :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Upper: \" upper-bound))\n            (labs :title \"Distribution of X\"\n                  :subtitle (str \"Percentage between thresholds: \"\n                                 (format \"%.4f\" percentage) \"%\")\n                  :x \"X\"\n                  :y \"Density\")\n            (scale_x_continuous :limits xlim)\n            (theme_minimal))\n        plot->svg)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn norm-plot-pval\n  \"Creates a ggplot2 plot for the temperature distribution with p-value shading.\"\n  [p-val mean-temp sd-temp direction]\n  (let [z-score (inv-normal (if (= direction :right) (- 1 p-val) p-val))\n        threshold (z->x z-score mean-temp sd-temp)\n        xlim [(- mean-temp (* 5 sd-temp)) (+ mean-temp (* 5 sd-temp))]]\n    (-> (ggplot :data (tc/dataset {:x xlim}) (aes :x 'x))\n        (r+ (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :geom \"area\" :fill \"lightblue\" :alpha 0.7)\n            (stat_function :fun dnorm :args [mean-temp sd-temp]\n                           :xlim (if (= direction :right)\n                                   [threshold (second xlim)]\n                                   [(first xlim) threshold])\n                           :geom \"area\" :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept threshold :color \"red\" :linetype \"dashed\")\n            (geom_text :x threshold :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Threshold: \" (format \"%.2f\" threshold)))\n            (labs :title \"Distribution of X\"\n                  :subtitle (str \"Percent of data in red: \" (* 100 p-val) \"%\")\n                  :x \"X\"\n                  :y \"Density\")\n            (scale_x_continuous :limits xlim)\n            (theme_minimal))\n        plot->svg)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn create-temperature-plot)\n  \"Creates a ggplot2 plot for the temperature distribution.\"\n  [plot-data threshold mean-temp sd-temp shade-direction]\n  (let [z-score (/ (- threshold mean-temp) sd-temp)\n        percentage (* 100 (if (= shade-direction :right)\n                            (- 1 (pnorm z-score))\n                            (pnorm z-score)))\n        shaded-data (tc/select-rows plot-data\n                                    (if (= shade-direction :right)\n                                      #(>= (:temperature %) threshold)\n                                      #(<= (:temperature %) threshold)))]\n    (-> (ggplot :data plot-data (aes :x 'temperature :y 'density))\n        (r+ (geom_area :fill \"lightblue\" :alpha 0.7)\n            (geom_area :data shaded-data\n                       :mapping (aes :x 'temperature :y 'density)\n                       :fill \"red\" :alpha 0.3)\n            (geom_vline :xintercept threshold :color \"red\" :linetype \"dashed\")\n            (geom_text :x threshold :y 0 :angle 90 :hjust -0.5 :vjust -0.5\n                       :label (str \"Threshold (\" threshold \"°F)\"))\n            (labs :title \"Distribution of Temperatures\"\n                  :subtitle (str \"Percentage \"\n                                 (if (= shade-direction :right) \"above\" \"below\")\n                                 \" threshold: \"\n                                 (format \"%.4f\" percentage) \"%\")\n                  :x \"Temperature (°F)\"\n                  :y \"Density\")\n            (theme_minimal)))))\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw1/blob/main/src/assignments/hw1/utils.clj\">src/assignments/hw1/utils.clj</a></small></small></pre></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw1.utils.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","fontsize":"0.9em","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}